/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Filter.jj */
/*@egen*/options {
               
    STATIC=false;
//    LOOKAHEAD=3;
}

PARSER_BEGIN(SyntaxChecker)
package loggerplusplus.filter.parser;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.regex.Pattern;

public class SyntaxChecker/*@bgen(jjtree)*/implements SyntaxCheckerTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTSyntaxCheckerState jjtree = new JJTSyntaxCheckerState();

/*@egen*/

    public SyntaxChecker(String s){
        this(new StringReader(s));
    }

    public static void main(String[] args) throws IOException {
        String str;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        while(!(str = in.readLine()).equalsIgnoreCase("END")) {
            try {
                SimpleNode root = parseFilter(str);
                root.dump("");
            } catch (Throwable e) {
                System.out.println("Syntax check failed: " + e.getMessage());
            }
        }
    }

    public static SimpleNode parseFilter(String string) throws IOException, ParseException {
        SyntaxChecker syntaxChecker = new SyntaxChecker(string);
        return syntaxChecker.Filter();
    }
}

PARSER_END(SyntaxChecker)

SKIP:  { " " | "\t" | "\n" | "\r" }
TOKEN [IGNORE_CASE]: {
    <EQ: "=" | "==" >
    | <NEQ: "!=" >
    | <GT: ">" >
    | <LT: "<" >
    | <GEQ: ">=" >
    | <LEQ: "<=" >
    | <OR: "|" | "||" | "OR" >
    | <AND: "&" | "&&" | "AND" >
    | <XOR: "^" | "XOR">
    | <BOOLEAN: "TRUE" | "FALSE">
    | <SINGLEQUOTEDSTRING: "'" ("\\" ~[] | ~["\'", "\\"])* "'" >
    | <DOUBLEQUOTEDSTRING: "\"" ("\\" ~[] | ~["\"", "\\"])* "\"" >
    | <NUMBER: ("-"|"+")?(<DIGIT>)+("."(<DIGIT>)+)?>
    | <DIGIT: ["0"-"9"] >
    | <REGEXLITERAL: "/\\Q" ("\\" ~["E"] | ~["\\"])* "\\E/" >
    | <REGEX: "/" ("\\" ~[] | ~["/", "\\"])* "/" >
    | <IDENTIFIER: (["a"-"z","A"-"Z"])+>
    | <LPAREN: "(">
    | <RPAREN: ")">
    | <INVERSE: "!">
}

SimpleNode Filter()         :
{/*@bgen(jjtree) FILTER */
  ASTFILTER jjtn000 = new ASTFILTER(JJTFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FILTER */
    try {
/*@egen*/
    Expression() <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression()             :
{/*@bgen(jjtree) EXPRESSION */
  ASTEXPRESSION jjtn000 = new ASTEXPRESSION(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EXPRESSION */
    try {
/*@egen*/
    (Inverse() (<LPAREN> Expression() <RPAREN>
                 | Identifier())
    | (<LPAREN> Expression() <RPAREN> | Comparison())
    )
    ((And() | Or() | Xor()) ((<LPAREN> Expression() <RPAREN> | Comparison())))*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Brackets()       :
{}
{
    <LPAREN> Expression() <RPAREN>
}

void Comparison()            :
{/*@bgen(jjtree) COMPARISON */
  ASTCOMPARISON jjtn000 = new ASTCOMPARISON(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COMPARISON */
    try {
/*@egen*/
    (
        Boolean() (Eq() | Neq() | Xor()) (Identifier() | Boolean())
        | Number() (Lt() | Gt() | Leq() | Geq() | Eq() | Neq()) (Number() | Identifier())
        | (String() | Regex()) (Eq() | Neq()) (String() | Regex() | Identifier())
        | Identifier() (
            (Eq() | Neq() | Xor()) (String() | Identifier() | Regex() | Number() | Boolean())
            | (Lt() | Gt() | Leq() | Geq()) (Identifier() | Number())
        )
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


//SimpleNode Filter() #FILTER :
//{}
//{
//    (
//        (LParen() Filter() RParen())
//        |
//        Expr()
//    )
//    ((And() | Or() | Xor()) Filter())*
//    {return jjtThis;}
//}
//
//void Expr() #EXPR:
//{}
//{
//    (
//        Boolean() ((Eq() | Neq() | Xor()) (Identifier() | Boolean() | Filter()))?
//        | Number() (Lt() | Gt() | Leq() | Geq() | Eq() | Neq()) (Number() | Identifier())
//        | (String() | Regex()) (Eq() | Neq()) (String() | Regex() | Identifier())
//        | Identifier() (
//            (Eq() | Neq() | Xor()) (String() | Identifier() | Regex() | Number() | Boolean() | Filter())
//            | (Lt() | Gt() | Leq() | Geq()) (Identifier() | Number())
//        )?
//    )
//}

String Inverse()         :
{/*@bgen(jjtree) INVERSE */
 ASTINVERSE jjtn000 = new ASTINVERSE(JJTINVERSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) INVERSE */
    try {
/*@egen*/
    t=<INVERSE> {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return (String) jjtn000.value;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Float Number()         :
{/*@bgen(jjtree) NUMBER */
 ASTNUMBER jjtn000 = new ASTNUMBER(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NUMBER */
    try {
/*@egen*/
    t=<NUMBER> {jjtn000.value = Float.parseFloat(t.image);}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return (Float) jjtn000.value;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String String()         :
{/*@bgen(jjtree) STRING */
 ASTSTRING jjtn000 = new ASTSTRING(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) STRING */
    try {
/*@egen*/
    ( t=<SINGLEQUOTEDSTRING> | t=<DOUBLEQUOTEDSTRING> )
    {jjtn000.value = t.image.substring(1,t.image.length()-1);}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return (String) jjtn000.value;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
Pattern Regex()        :
{/*@bgen(jjtree) REGEX */
 ASTREGEX jjtn000 = new ASTREGEX(JJTREGEX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) REGEX */
    try {
/*@egen*/
    (
    t=<REGEXLITERAL>
    |
    t=<REGEX>
    ){jjtn000.value = Pattern.compile(t.image.substring(1,t.image.length()-1), Pattern.CASE_INSENSITIVE);}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return (Pattern) jjtn000.value;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
String Identifier()             :
{/*@bgen(jjtree) IDENTIFIER */
 ASTIDENTIFIER jjtn000 = new ASTIDENTIFIER(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) IDENTIFIER */
    try {
/*@egen*/
    t=<IDENTIFIER> {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return (String) jjtn000.value;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Boolean Boolean()          :
{/*@bgen(jjtree) BOOLEAN */
 ASTBOOLEAN jjtn000 = new ASTBOOLEAN(JJTBOOLEAN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BOOLEAN */
    try {
/*@egen*/
    t=<BOOLEAN> {jjtn000.value = Boolean.parseBoolean(t.image);}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return (Boolean) jjtn000.value;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Eq()     :
{/*@bgen(jjtree) EQ */
 ASTEQ jjtn000 = new ASTEQ(JJTEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) EQ */
    try {
/*@egen*/
    t=<EQ>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Neq()      :
{/*@bgen(jjtree) NEQ */
 ASTNEQ jjtn000 = new ASTNEQ(JJTNEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NEQ */
    try {
/*@egen*/
    t=<NEQ>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Gt()     :
{/*@bgen(jjtree) GT */
 ASTGT jjtn000 = new ASTGT(JJTGT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) GT */
    try {
/*@egen*/
    t=<GT>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Geq()      :
{/*@bgen(jjtree) GEQ */
 ASTGEQ jjtn000 = new ASTGEQ(JJTGEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) GEQ */
    try {
/*@egen*/
    t=<GEQ>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Lt()     :
{/*@bgen(jjtree) LT */
 ASTLT jjtn000 = new ASTLT(JJTLT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LT */
    try {
/*@egen*/
    t=<LT>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Leq()      :
{/*@bgen(jjtree) LEQ */
 ASTLEQ jjtn000 = new ASTLEQ(JJTLEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LEQ */
    try {
/*@egen*/
    t=<LEQ>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void And()      :
{/*@bgen(jjtree) AND */
 ASTAND jjtn000 = new ASTAND(JJTAND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AND */
    try {
/*@egen*/
    t=<AND>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Or()     :
{/*@bgen(jjtree) OR */
 ASTOR jjtn000 = new ASTOR(JJTOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OR */
    try {
/*@egen*/
    t=<OR>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Xor()      :
{/*@bgen(jjtree) XOR */
 ASTXOR jjtn000 = new ASTXOR(JJTXOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XOR */
    try {
/*@egen*/
    t=<XOR>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}